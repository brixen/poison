#!/usr/bin/env rbx
#
# vim: filetype=ruby

$:.unshift File.expand_path('../../lib', __FILE__)

require 'pp'
require 'poison'

class PoisonScript
  def initialize
    @evals = []
    @ast    = false
    @sexp   = false
    @script = nil
  end

  def options(argv=ARGV)
    options = Rubinius::Options.new "Usage: poison [options] [script]", 20

    options.on "-", "Read and evaluate code from STDIN" do
      @evals << STDIN.read
    end

    options.on "-c", "FILE", "Check the syntax of FILE" do |f|
      begin
        begin
          Poison::Parser.new.parse_file f
        rescue Poison::Syntax::SyntaxError => e
          e.render
          exit 1
        end

        puts "Syntax OK"
        exit 0
      end
    end

    options.on "-A", "Print the AST" do
      @ast = true
    end

    options.on "-S", "Print the S-expression" do
      @sexp = true
    end

    options.on "-e", "CODE", "Execute CODE" do |e|
      @evals << e
    end

    options.on "-h", "--help", "Display this help" do
      puts options
      exit 0
    end

    options.doc ""

    rest = options.parse(argv)
    @script ||= rest.first
  end

  def evals
    return if @evals.empty?

    ast = Poison::Parser.new.parse @evals.join("\n")

    if @ast
      puts "\n========= AST ========="
      ast.graph
      puts "------------------------"
    end

    if @sexp
      puts "\n===== S-expression ====="
      pp ast.to_sexp
      puts "------------------------"
    end

    Poison::CodeLoader.execute ast
  end

  def script
    return unless @script

    if File.exists? @script

      Poison::CodeLoader.execute_file @script
    else
      STDERR.puts "Unable to find '#{@script}' to run"
      exit 1
    end
  end

  def repl
    return if @script
  end

  def main
    options
    evals
    script
    repl
  end
end

PoisonScript.new.main
