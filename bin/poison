#!/usr/bin/env rbx
#
# vim: filetype=ruby

$:.unshift File.expand_path('../../lib', __FILE__)

require 'poison'

class PoisonScript
  def initialize
    @evals = []
    @asts = []
    @sexps = []
    @parses = []
    @source = nil
    @script = nil
  end

  def options(argv=ARGV)
    options = Rubinius::Options.new "Usage: poison [options] [script]", 20

    options.on "-", "Read and evaluate code from STDIN" do
      @source = STDIN.read
    end

    options.on "-c", "FILE", "Check the syntax of FILE" do |f|
      begin
        begin
          Poison::Compiler.parse_file f, 1
        rescue Poison::SyntaxError => e
          e.show
          exit 1
        end

        puts "Syntax OK"
        exit 0
      end
    end

    options.on "-A", "CODE", "Print the AST for CODE" do |code|
      @asts << code
    end

    options.on "-S", "CODE", "Print the S-expression for CODE" do |code|
      @sexps << code
    end

    options.on "-P", "CODE", "Print the parse tree for CODE" do |code|
      @parses << code
    end

    options.on "-e", "CODE", "Execute CODE" do |e|
      @evals << e
    end

    options.on "-h", "--help", "Display this help" do
      puts options
      exit 0
    end

    options.doc ""

    rest = options.parse(argv)
    @script ||= rest.first
  end

  def evals
    return if @evals.empty?
    Poison::CodeLoader.execute_script @evals.join("\n")
  end

  def parses
    return if @parses.empty?

    parser = Poison::Compiler.get_parser.new
    p parser.parse(@parses.join("\n"))
  end

  def asts
    return if @asts.empty?

    compiler = Poison::Compiler.new @asts.join("\n")
    p compiler.parse
  end

  def sexps
    return if @sexps.empty?

    compiler = Poison::Compiler.new @sexps.join("\n")
    p compiler.parse.to_sexp
  end

  def script
    return unless @script

    if File.exists? @script

      Poison::CodeLoader.execute_file @script
    else
      STDERR.puts "Unable to find '#{@script}' to run"
      exit 1
    end
  end

  def repl
  end

  def main
    options
    evals
    asts
    sexps
    parses
    script
    repl
  end
end

PoisonScript.new.main
